****************************** House-DOS System Call Documentation ******************************
=================================================================================================

This document contains information about all the system calls available in House-DOS/Assembly
programming, as well as some general information about using these system calls.

I. Writing Commands/Implementation

House-DOS commands are written in real mode x86 assembly language. There is no need to worry
about segmentation or preserving register states, as the kernel takes care of this.

There are 19 various system calls available to commands, and these are called by setting
parameters in various registers, and calling on interrupt 0x7E. Here is an example of a system
call to print out a string:

    mov ah, 0x02
    mov si, string_mem_location
    int 0x7E

In this example, the string (terminated with NULL char) pointed to by SI will be printed out, and
the cursor will be moved one line down. The following sections contain details on all the system
calls available.

Out of the system calls listed, the ones marked with an asterisk (*) have not yet been
implemented, but are planned.


II. Basic Functions

    RE-INITIALIZE
        AH = 0x00

        Completely re-initializes House-DOS, including re-loading constants from the bootsector,
        resetting the stack, re-configuring the interrupt vector should anything have happened
        to it, clearing the screen, and displaying the welcome message.

    HANDBACK
        AH = 0xFF

        Signals the end of the command. When this is used, command execution will stop and
        House-DOS will prompt the user for a new command.

    CONVERT TO HEX
        AH = 0xF0
        DX = Value to convert
        DI = 4-byte buffer for result

        Converts the value in DX into ASCII hexadecimal notation, which is stored in the four-
        byte buffer pointed to by DI.

    CONVERT TO UNSIGNED DECIMAL
        AH = 0xF1
        DX = Value to convert
        DI = 5-byte buffer for result

        Converts the value in DX into ASCII decimal notation (unsigned), which is stored in the
        five-byte buffer pointed to by DI.

    CONVERT UNSIGNED DECIMAL TO BINARY
        AH = 0xF3
        SI = 5-byte buffer for input number
        Return:
        DX = Binary value

        Converts the ASCII decimal number in the five-byte input buffer to a binary value in DX.


III. Interface Functions

    PRINT-STRING
        AH = 0x01
        SI = String location

        Prints out the string in SI in teletype mode.

    PRINT-STRING AND LINE-BREAK
        AH = 0x02
        SI = String location

        Prints out the string in SI in teletype mode, and then moves the cursor to the next line.

    REQUEST CONFIRMATION
        AH = 0x03

        Return:
        CF = Set if confirmation denied, cleared if confirmation given.

        Prompts the user to give confirmation before proceeding. The carry-flag will be set if
        confirmation was not given.

    GET KEYBOARD INPUT
        AH = 0x04
        DI = Buffer location
        CX = Size of buffer
        Return:
        DI = Initial value + Number of chars input

        Retrieves user input through the keyboard. Any input will be printed out in teletype
        mode, and the input will be stored in the buffer pointed to by DI.

    LINE-BREAK
        AH = 0x05

        Moves the cursor to the far left of the next line down.

    PRINT BYTES
        AH = 0x10
        SI = Source
        CX = Number of characters

        Prints out specified number of characters from source.
    

IV. Disk Functions

    VERIFY FILE EXISTS
        AH = 0x60
        SI = X.3 filename

        Return:
        CF = Set if file does not exist, cleared if it does.

        Verifies that a file with the given filename exists, and sets up for loading that file.

    LOAD FILE
        AH = 0x61

        Clears the file buffer and loads the file that was just verified into it.

    GET BYTES (INDEX-QUANTITY)
        AH = 0x62
        SI = Byte to start at
        CX = Number of bytes
        DI = Destination buffer

        Return:
        SI = Initial value + Number of bytes copied
        DI = Initial value + Number of bytes copied
        CF = Set on error.

        Gets a certain quantity of bytes from the file buffer starting at the given index, and
        stores that in the destination buffer.

    GET BYTES (INDEX-INDEX)
        AH = 0x63
        SI = Byte to start at
        CX = Byte to stop at (non-inclusive)
        DI = Destination buffer

        Return:
        SI = Initial value + Number of bytes copied
        DI = Initial value + Number of bytes copied
        CF = Set on error.

        Gets bytes from file buffer between the two indexes, and stores that in the destination
        buffer.

*   GET LINES
        AH = 0x64
        BX = Line number
        CX = Number of lines
        DI = Destination buffer

        Gets a certain quantity of lines from the file buffer, and stores that in the destination
        buffer.

    WRITE BYTES (INDEX-QUANTITY)
        AH = 0x68
        SI = Source buffer
        CX = Number of bytes
        DI = Byte to start writing at

        Return:
        SI = Initial value + Number of bytes copied
        DI = Initial value + Number of bytes copied

        WRITES a certain quantity of bytes from the source buffer into the file buffer at the
        given index.

    WRITE BYTES (INDEX-INDEX)
        AH = 0x69
        SI = Source buffer
        CX = End of source buffer
        DI = Byte to start writing at

        Return:
        SI = Initial value + Number of bytes copied
        DI = Initial value + Number of bytes copied

        WRITES bytes from the buffer between the two indexes into the file buffer at the given
        index.

*   WRITE LINES
        AH = 0x6A
        SI = Source buffer
        BX = Line number
        CX = Number of lines

        WRITES a certain quantity of lines from the source buffer into the file buffer at the
        given line number.

*   INSERT BYTES (INDEX-QUANTITY)
        AH = 0x6B
        SI = Source buffer
        CX = Number of bytes
        DI = Byte to start writing at

        INSERTS a certain quantity of bytes from the source buffer into the file buffer at the
        given index.

*   INSERT BYTES (INDEX-INDEX)
        AH = 0x6C
        SI = Source buffer
        CX = End of source buffer
        DI = Byte to start writing at

        INSERTS bytes from the buffer between the two indexes into the file buffer at the given
        index.

*   INSERT LINES
        AH = 0x6D
        SI = Source buffer
        BX = Line number
        CX = Number of lines

        INSERTS a certain quantity of lines from the source buffer into the file buffer at the
        given line number.

    CLEAR ENTIRE BUFFER
        AH = 0x6E

        Overwrites everything in the file buffer with zeroes.

    WRITE TO DISK
        AH = 0x6F
        SI = X.3 filename
        CX = File size

        Write file with given filename to disk.

    GET FILE SIZE
        AH = 0x70
        SI = X.3 filename

        Return:
        CF = Set if file does not exist, cleared if it does.
        DX:AX = File size in bytes

        Returns the size of the file with the filename given.

