****************************** House-DOS System Call Documentation ******************************
=================================================================================================

This document contains information about all the system calls available in House-DOS/Assembly
programming, as well as some general information about using these system calls.

I. Writing Commands/Implementation

House-DOS commands are written in real mode x86 assembly language. There is no need to worry
about segmentation or preserving register states, as the kernel takes care of this.

There are various system calls available to commands, and these are called by setting parameters
in various registers, and calling on interrupt 0x7E. Here is an example of a system call to print
out a string:

    mov ah, 0x02
    mov si, string_mem_location
    int 0x7E

In this example, the string (terminated with NULL char) pointed to by SI will be printed out, and
the cursor will be moved one line down. The following sections contain details on all the system
calls available.

Out of the system calls listed, the ones marked with an asterisk (*) have not yet been
implemented, but are planned.


II. Basic Functions

    RE-INITIALIZE
        AH = 0x00

        Completely re-initializes House-DOS, including re-loading constants from the bootsector,
        resetting the stack, re-configuring the interrupt vector should anything have happened
        to it, clearing the screen, and displaying the welcome message.

    HANDBACK
        AH = 0xFF

        Signals the end of the command. When this is used, command execution will stop and
        House-DOS will prompt the user for a new command.

    GET UNIX TIME
        AH = 0xD0

        Return:
        DX:AX = UNIX time

        Returns the current UNIX timestamp.

    GET SECONDS SINCE MIDNIGHT
        AH = 0xD1

        Return:
        DX:AX = Number of seconds

        Returns the number of seconds since 00:00:00.

    GET DAYS SINCE UNIX EPOCH
        AH = 0xD2

        Return:
        AX = Number of days

        Returns the number of days since 1970-01-01.

    GET TIMESTAMP
        AH = 0xD3
        DI = 8-byte output buffer

        Stores the current time in HH:MM:SS form in the buffer pointed to by DI.

    GET DATESTAMP
        AH = 0xD4
        DI = 10-byte output buffer

        Stores the current date in YYYY-MM-DD form in the buffer pointed to by DI.

    GENERATE RANDOM NUMBER
        AH = 0xA0

        Return:
        DX = Random number

        Generates and returns a very poorly-generated random number.

    GENERATE RANDOM NUMBER SEED
        AH = 0xA1

        Generates a new random seed. (Is ineffective if used multiple times a second.)

    SLEEP MILLISECONDS
        AH = 0xC0
        CX = Number of milliseconds

        Halts execution for the specified number of milliseconds.

    SLEEP FRAMES
        AH = 0xC1
        BX = Framerate/Frequency
        CX = Number of frames

        Halts instruction for the specified number of frames if a frame is 1/Frequency seconds
        long.

    PC SPEAKER TONE
        AH = 0xC2
        DX = Frequency

        Plays tone of specified frequency on the PC speaker.

    MUTE PC SPEAKER
        AH = 0xC3

        Stops the PC speaker until a new tone is played.


III. Logic Functions

    CONVERT WORD TO HEX
        AH = 0xF0
        DX = Value to convert
        DI = 4-byte output buffer

        Converts the value in DX into ASCII hexadecimal notation, which is stored in the four-
        byte output buffer.

    CONVERT WORD TO UNSIGNED ASCII DECIMAL
        AH = 0xF1
        DX = Value to convert
        DI = 5-byte output buffer

        Converts the value in DX into ASCII decimal notation (unsigned), which is stored in the
        five-byte output buffer.

    CONVERT HEX TO WORD
        AH = 0xF2
        SI = 4-byte input buffer

        Return:
        DX = Binary value
        CF = Set on error

        Converts the ASCII hexadecimal number in the four-byte input buffer to a word-size binary
        value in DX.

    CONVERT ASCII DECIMAL TO WORD
        AH = 0xF3
        SI = 5-byte input buffer

        Return:
        DX = Binary value
        CF = Set on error

        Converts the ASCII decimal number in the five-byte input buffer to a word-size binary
        value in DX.

    CONVERT BYTE TO HEX
        AH = 0xF4
        DL = Value to convert
        DI = 2-byte output buffer

        Converts the value in DL into ASCII hexadecimal notation, which is stored in the two-
        byte output buffer.

    CONVERT BYTE TO UNSIGNED ASCII DECIMAL
        AH = 0xF5
        DL = Value to convert
        DI = 3-byte output buffer

        Converts the value in DL into ASCII decimal notation (unsigned), which is stored in the
        three-byte output buffer.

    CONVERT HEX TO BYTE
        AH = 0xF6
        SI = 2-byte input buffer

        Return:
        DL = Binary value
        CF = Set on error

        Converts the ASCII hexadecimal number in the two-byte input buffer to a byte-size binary
        value in DX.

    CONVERT ASCII DECIMAL TO BYTE
        AH = 0xF7
        SI = 3-byte input buffer

        Return:
        DL = Binary value
        CF = Set on error

        Converts the ASCII decimal number in the three-byte input buffer to a byte-size binary
        value.


IV. Interface Functions

    PRINT-STRING
        AH = 0x01
        SI = String location

        Prints out the string in SI in teletype mode.

    PRINT-STRING AND LINE-BREAK
        AH = 0x02
        SI = String location

        Prints out the string in SI in teletype mode, and then moves the cursor to the next line.

    REQUEST CONFIRMATION
        AH = 0x03

        Return:
        CF = Set if confirmation denied, cleared if confirmation given.

        Prompts the user to give confirmation before proceeding. The carry-flag will be set if
        confirmation was not given.

    GET KEYBOARD INPUT
        AH = 0x04
        DI = Buffer location
        CX = Size of buffer

        Return:
        DI = Initial value + Number of chars input

        Retrieves user input through the keyboard. Any input will be printed out in teletype
        mode, and the input will be stored in the buffer pointed to by DI.

    LINE-BREAK
        AH = 0x05

        Moves the cursor to the far left of the next line down.

    CLEAR SCREEN
        AH = 0x06

        Clears the screen.

    SHOW/HIDE CURSOR
        AH = 0x07
        CF = Cleared for show, set for hide

        Shows or hides the cursor.

    SET CURSOR POSITION
        AH = 0x08
        DH = Row number
        DL = Col number

        Moves the cursor to the specified position.

    PRINT BYTES
        AH = 0x10
        SI = Source
        CX = Number of characters

        Prints out specified number of characters from source.

    DRAW BLOCK
        AH = 0x11
        AL = Char ASCII code
        BL = Color (Bit 0 = Blue, Bit 1 = Green, Bit 2 = Red, Bit 3 = Intensity)
        CX = Block length
        DH = Row number
        DL = Col number

        Draws a block of a specific length, color, and character starting at the specified spot.

    GET CURRENT KEYBOARD CHARACTER
        AH = 0x12

        Return:
        AH = Key scan code
        AL = ASCII code
        CF = Set if no key pressed, cleared if key is being pressed

        Returns the scan code and ASCII code of the key being pressed on the keyboard.


V. Disk Functions

    VERIFY FILE EXISTS
        AH = 0x60
        SI = X.3 filename

        Return:
        CF = Set if file does not exist, cleared if it does.

        Verifies that a file with the given filename exists, and sets up for loading that file.

    LOAD FILE
        AH = 0x61

        Clears the file buffer and loads the file that was just verified into it.

    GET BYTES (INDEX-QUANTITY)
        AH = 0x62
        SI = Byte to start at
        CX = Number of bytes
        DI = Destination buffer

        Return:
        SI = Initial value + Number of bytes copied
        DI = Initial value + Number of bytes copied
        CF = Set on error.

        Gets a certain quantity of bytes from the file buffer starting at the given index, and
        stores that in the destination buffer.

    GET BYTES (INDEX-INDEX)
        AH = 0x63
        SI = Byte to start at
        CX = Byte to stop at (non-inclusive)
        DI = Destination buffer

        Return:
        SI = Initial value + Number of bytes copied
        DI = Initial value + Number of bytes copied
        CF = Set on error.

        Gets bytes from file buffer between the two indexes, and stores that in the destination
        buffer.

*   GET LINES
        AH = 0x64
        BX = Line number
        CX = Number of lines
        DI = Destination buffer

        Gets a certain quantity of lines from the file buffer, and stores that in the destination
        buffer.

    WRITE BYTES (INDEX-QUANTITY)
        AH = 0x68
        SI = Source buffer
        CX = Number of bytes
        DI = Byte to start writing at

        Return:
        SI = Initial value + Number of bytes copied
        DI = Initial value + Number of bytes copied

        WRITES a certain quantity of bytes from the source buffer into the file buffer at the
        given index.

    WRITE BYTES (INDEX-INDEX)
        AH = 0x69
        SI = Source buffer
        CX = End of source buffer
        DI = Byte to start writing at

        Return:
        SI = Initial value + Number of bytes copied
        DI = Initial value + Number of bytes copied

        WRITES bytes from the buffer between the two indexes into the file buffer at the given
        index.

*   WRITE LINES
        AH = 0x6A
        SI = Source buffer
        BX = Line number
        CX = Number of lines

        WRITES a certain quantity of lines from the source buffer into the file buffer at the
        given line number.

*   INSERT BYTES (INDEX-QUANTITY)
        AH = 0x6B
        SI = Source buffer
        CX = Number of bytes
        DI = Byte to start writing at

        INSERTS a certain quantity of bytes from the source buffer into the file buffer at the
        given index.

*   INSERT BYTES (INDEX-INDEX)
        AH = 0x6C
        SI = Source buffer
        CX = End of source buffer
        DI = Byte to start writing at

        INSERTS bytes from the buffer between the two indexes into the file buffer at the given
        index.

*   INSERT LINES
        AH = 0x6D
        SI = Source buffer
        BX = Line number
        CX = Number of lines

        INSERTS a certain quantity of lines from the source buffer into the file buffer at the
        given line number.

    CLEAR ENTIRE BUFFER
        AH = 0x6E

        Overwrites everything in the file buffer with zeroes.

    WRITE TO DISK
        AH = 0x6F
        SI = X.3 filename
        CX = File size

        Write file with given filename to disk.

    GET FILE SIZE
        AH = 0x70
        SI = X.3 filename

        Return:
        CF = Set if file does not exist, cleared if it does.
        DX:AX = File size in bytes

        Returns the size of the file with the filename given.

    RENAME FILE
        AH = 0x78
        SI = X.3 filename to rename to

        Return:
        CF = Set on error

        Renames the verified file.

    DELETE FILE
        AH = 0x79

        Return:
        CF = Set on error

        Deletes the verified file.

    APPLY FILESYSTEM CHANGES
        AH = 0x7F

        Return:
        CF = Set on error

        Writes the FAT and directory to the disk as they are in memory; thereby applying all
        renames and deletions.

