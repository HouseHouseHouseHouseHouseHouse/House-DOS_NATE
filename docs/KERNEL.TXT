******************************** House-DOS Kernel Documentation *********************************
=================================================================================================

This document contains information about the House-DOS kernel and how it functions.

I. Basic Info

The House-DOS kernel contains a bunch of routines for doing a variety of different tasks, and
also acts as a handler for system calls made by programs. It is responsible for loading programs,
getting input from the user, and working with devices. It is loaded as the file SYS.BIN, and is
assembled from the file src/SYS.ASM and all the subsystems located in src/sys/.

MEMORY MAP

0x08000 - 0x0BFFF:  STACK
0x10000 - 0x1FFFF:  I/O BUFFER
                    The file buffer is where all files are loaded from the disk and edited.
0x20000 - 0x2FFFF:  KERNEL
                    This is the area in memory where the kernel is stored and is the spot where
                    system calls will redirect to.
0x30000 - 0x3FFFF:  FILESYSTEM
                    This is where portions of the filesystem (FAT, directories) are loaded and
                    referenced. This gets written to the disk whenever filesystem changes are
                    applied.
0x40000 - 0x4FFFF:  EXECUTION
                    This is where binaries are loaded to be executed.
0x50000 - 0x5FFFF:  USER BUFFER
                    This is a reserved space for the user to redirect output to and direct input
                    from. It is accessible through the MEM.DEV device file.


II. Initialization

Here is a list of steps the House-DOS kernel performs after it has been loaded by the bootloader:

    0.  Set up segmentation
    1.  Copy necessary info from the BPB to the kernel
    2.  Reset the stack
    3.  Set up the system call interrupt
    4.  Set up other hardware interrupt vectors
    5.  Configure video mode and print message/sound


III. Main Loop

After initialization, House-DOS effectively loops through getting a command and loading the
binary for that command. Here is this loop in more detail:

    0.  Check if the last program was to be piped, skip to 3 in this case
    1.  Line break and print out prompt
    2.  Get keyboard input for new command
    3.  Format binary filename correctly
    4.  Parse parameters and special configurations
    5.  Load binary into file segment
    6.  Copy into execution segment
    7.  Perform 7A if a metadata attribute was selected, otherwise 7B
    7A. Lookup and output the metadata string from the program
    7B. Jump to execution segment


IV. System Calls

Whenever interrupt 0x7E is called, House-DOS runs the specified system call and returns output,
if appropriate. This is what happens:

    0.  Flags are preserved
    1.  If AH is 0xFF, perform a handback (reset stack and jump to main loop)
    2.  Otherwise, enter system call handler
    3.  Jump to correct system call routine
    4.  Other kernel routines are called on
    5.  Jump to interrupt return routine (if flags were used for the system call, the POPF is
        skipped; if flags should be returned, a different routine is used)
    6.  Segmentation is set up and interrupt return


V. The I/O Buffer

The file is the region in memory where programs can retrieve input and write output. This is
also where files are loaded and written from. It takes up all the accessible space in segment
0x1000, thus it is 64K in length.


VI. The Filesystem Segment

The bootloader loads the entire FAT of the 32M disk into the space in memory from
0x30000 to 0x37FFF. It also loads the root directory into the space in memory immediately
following that (0x38000 to 0x3BFFF). The remaining space (0x3C000 to 0x3FFFF) is used for loading
clusters before copying them to the I/O buffer. In the future, the area used for the FAT will be
abridged and the kernel will keep record of what area of the FAT is loaded, in order to support
disks of other sizes. In addition, the new additional space will be used for loading the /BIN and
/HOME directorites, the /DEV, and /PROC filesystems, as well as for allowing for CD'ing between
subdirectories.
