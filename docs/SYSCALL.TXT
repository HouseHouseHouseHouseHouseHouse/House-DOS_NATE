****************************** House-DOS System Call Documentation ******************************
=================================================================================================

This document contains information about all the system calls available in House-DOS/Assembly
programming, as well as some general information about using these system calls.

I. Writing Commands/Implementation

House-DOS commands are written in real mode x86 assembly language. There is no need to worry
about segmentation or preserving register states, as the kernel takes care of this.

There are various system calls available to commands, and these are called by setting parameters
in various registers, and calling on interrupt 0x7E. Here is an example of a system call to print
out a string:

    mov ah, 0x02
    mov si, string_mem_location
    int 0x7E

In this example, the string (terminated with NULL char) pointed to by SI will be printed out, and
the cursor will be moved one line down. The following sections contain details on all the system
calls available.

Out of the system calls listed, the ones marked with an asterisk (*) have not yet been
implemented, but are planned.


II. Basic Functions

    HANDBACK
        AH = 0xFF

        Signals the end of the command. When this is used, command execution will stop and
        House-DOS will prompt the user for a new command.

    EXIT_ERROR
        AH = 0xFE
        SI = String location

        Same as a handback, but will display string as an error message.

    GET_UNIXTIME
        AH = 0xD0

        Return:
        DX:BX = UNIX timestamp

        Returns the current UNIX timestamp.

    SHUTDOWN
        AH = 0xA2

        Shuts down the system.

    REBOOT
        AH = 0xA3

        Reboots the system.

    GET_OS_VERSION_STRING
        AH = 0xB0
        DI = Destination buffer

        Return:
        DI = Initial value + bytes copied

        Retrieves the House-DOS version string.

    GET_OS_CREATOR_STRING
        AH = 0xB1
        DI = Destination buffer

        Return:
        DI = Initial value + bytes copied

        Retrieves the House-DOS creator string.

    GET_CPU_BRAND_STRING
        AH = 0xB2
        DI = Destination buffer

        Return:
        DI = Initial value + bytes copied

        Retrieves the CPU branding string.


III. I/O Functions

    AH = 0x40: BASIC OUTPUT

        Return:
        CF = Set on error/buffer overflow

        These system calls utilize a kernel variable for a pointer. Addresses need not be
        provided as whatever output is provided will be written to the address contained in that
        pointer; the pointer will then be advanced past that output. Only what has been written
        to the buffer (and null characters between) will be output; any null characters after the
        rightmost output will not be part of the ultimate output.

        OUT_STRING
            AL = 0x00
            SI = String Location

            Outputs a string.

        OUT_STRING_LINE
            AL = 0x01
            SI = String Location

            Outputs a string and a line break.

        OUT_LINE_BREAK
            AL = 0x02

            Outputs a line break.

        OUT_BYTES
            AL = 0x10
            SI = Source
            CX = Number of Bytes

            Outputs specified number of bytes from source.

        OUT_FILE
            AL = 0x20

            Return:
            CF = Set on error

            Outputs the last verified file.

        OUT_INT_DEC
            AL = 0x40
            DX = Number to output

            Outputs integer in decimal notation.

        OUT_BYTE_DEC
            AL = 0x41
            DL = Number to output

            Outputs byte in decimal notation.

        OUT_INT_HEX
            AL = 0x42
            DX = Number to output

            Outputs integer in hexadecimal notation.

        OUT_BYTE_HEX
            AL = 0x43
            DX = Number to output

            Outputs byte in hexadecimal notation.

        OUT_UNIXTIME_DATESTAMP
            AL = 0x50
            DX:BX = UNIX timestamp

            Outputs UNIX timestamp as ASCII YYYY-MM-DD datestamp.

        OUT_UNIXTIME_TIMESTAMP
            AL = 0x51
            DX:BX = UNIX timestamp

            Outputs UNIX timestamp as ASCII HH:MM:SS timestamp.

    AH = 0x41: BUFFER FUNCTIONS (OUTPUT)

        CLEAR_BUFFER
            AL = 0x00

            Clears the I/O buffer and resets pointers/endpoint.

        SET_POINTER
            AL = 0x10
            DI = New pointer value

            Sets the output buffer pointer.

        SET_ENDPOINT
            AL = 0x11
            CX = New total value

            Sets the endpoint within the buffer.

        GET_POINTER
            AL = 0x12

            Return:
            DI = Current pointer value

            Retrieves the current output buffer pointer.

        GET_ENDPOINT
            AL = 0x13

            Return:
            CX = Current endpoint

            Retrieves the current endpoint.

        POINTER_ROW_COL
            AL = 0x14

            Return:
            CX = Line number
            DX = Col number

            Retrieves the line and col values of the current output buffer pointer.

        INC_POINTER
            AL = 0x20

            Increments the output buffer pointer.

        ADVANCE_POINTER
            AL = 0x21
            CX = Number to bytes to advance

            Advances the output buffer pointer the specified number of bytes.

        INDENT_POINTER
            AL = 0x22
            DX = Col number

            Advances the output buffer pointer to the specified column in the current line.

        POINTER_RESET
            AL = 0x40

            Moves the output buffer pointer to the start of the buffer.

        POINTER_END
            AL = 0x41

            Moves the output buffer pointer to the end of the buffer.

    OUT_BYTE
        AH = 0x42
        AL = Byte to output

        Outputs a certain byte.

    SET_DEFAULT_DEV_OUT
        AH = 0x43
        AL = New device (0 = NUL, 1 = TTY, 2 = MEM)

        Sets a new default device to write output to at the end of the command.

    AH = 0x44: INSERT OUTPUT

        Return:
        CF = Set on error/buffer overflow

        These system calls function similar to the basic output calls, in that they utilize the
        same hidden pointers. They differ in that these calls will shift any output to the right
        so that it will not be overwritten.

        OUT_INS_STRING
            AL = 0x00
            SI = String location

            Insert a string into the output.

        OUT_INS_STRING_LINE
            AL = 0x01
            SI = String location

            Insert a string and a line break into the output.

        OUT_INS_BYTES
            AL = 0x10
            SI = Source buffer
            CX = Number of bytes

            Inserts specified number of bytes into the output.

    SHIFT_BUFFER
        AH = 0x45
        SI = Index to begin shift from
        CX = Offset rightward
        CF = Set for unsigned offset
        DF = Set for left offset (only if unsigned)

        Shifts everything past one point in the buffer by a certain offset.

    OUT_INS_BYTE
        AH = 0x46
        AL = Byte to insert

        Inserts a certain byte into the output.

    AH = 0x48: MANUAL OUTPUT (BYTES)

        OUT_MAN_BYTES
            AL = 0x00
            SI = Source buffer
            CX = Number of bytes
            DI = Buffer address

            Return:
            SI = Initial value + bytes copied
            DI = Initial value + bytes copied
            CF & ZF = Cleared if buffer exceeded.

            Writes a certain number of bytes to a specific position in the I/O buffer.

        OUT_MAN_BYTES_INDICES
            AL = 0x01
            SI = Source buffer
            CX = End of source
            DI = Buffer address

            Return:
            SI = Initial value + bytes copied
            DI = Initial value + bytes copied
            CF & ZF = Cleared if buffer exceeded.

            Writes bytes between two indices to a specific position in the I/O buffer.

    AH = 0x49: MANUAL OUTPUT (LINES)

        OUT_LINE
            AL = 0x00
            CX = Line number
            SI = Source buffer

            Return:
            SI = Initial value + bytes copied
            CF = Set if no such line

            Overwrites a certain line in the I/O buffer.

    WRITE_BUFFER
        AH = 0x4F
        SI = X.3 filename (or 0x0000)

        Return:
        CF = Set on error

        Write buffer to disk as a file with the name given. If SI is 0, then the most recently
        verified file will be written to.


    AH = 0x50: BASIC INPUT

        These system calls utilize a similar pointer for retrieving input. Any input retrieved
        will move the input buffer pointer ahead. Both CF and ZF are cleared whenever the input
        pointer exceeds the buffer endpoint (i.e. use JA for exiting the loop). No more bytes
        will be copied when this happens.

        IN_STRING
            AL = 0x00
            DI = Destination buffer

            Return:
            CX = Number of bytes copied

            Retrieves a string from the buffer.

        IN_BYTES
            AL = 0x10
            DI = Destination buffer
            CX = Number of bytes

            Return:
            CX = Number of bytes copied

            Retrieves a certain number of bytes from the buffer.

    AH = 0x51: BUFFER FUNCTIONS (INPUT)

        SET_POINTER
            AL = 0x00
            SI = New pointer value

            Sets the input buffer pointer.

        GET_POINTER
            AL = 0x01

            Return:
            SI = Current pointer value

            Retrieves the current input buffer pointer.

    IN_BYTE
        AH = 0x52

        Returns:
        AL = Resulting byte
        CF & ZF = Cleared if pointer has passed the endpoint.

        Retrieves a byte from the buffer at the input buffer pointer.

    AH = 0x58: MANUAL INPUT (BYTES)

        IN_MAN_BYTES
            AL = 0x00
            SI = Starting address
            CX = Number of bytes
            DI = Destination buffer

            Return:
            SI = Initial value + bytes copied
            DI = Initial value + bytes copied
            CF & ZF = Cleared if buffer exceeded.

            Retrieves a certain number of bytes from a specific position in the I/O buffer.

        IN_MAN_BYTES_INDICES
            AL = 0x01
            SI = Starting address
            CX = Ending address
            DI = Destination buffer

            Return:
            SI = Initial value + bytes copied
            DI = Initial value + bytes copied
            CF & ZF = Cleared if buffer exceeded.

            Retrieves the bytes between two indices in the I/O buffer.

    AH = 0x59: LINE INPUT

        IN_LINE
            AL = 0x00
            CX = Line number
            DI = Destination buffer

            Return:
            DI = Initial value + bytes copied
            CF = Set if no such line

            Retrieves the contents of a certain line in the I/O buffer.

        LINE_INFO
            AL = 0x10
            CX = Line number

            Return:
            SI = Line address
            CX = Line length
            CF = Set if no such line

            Gets the address and length of a certain line in the I/O buffer.


IV. Object/Data Functions

    AH = 0x80: STRING OPERATIONS

        STRING_COMPARE
            AL = 0x00
            SI = String A Location
            DI = String B Location

            Return:
            ZF = Set if equal

            Compares two strings.

        STRING_FIND_SUBSTRING
            AL = 0x01
            SI = String Location
            BX = Starting index for search (0 = start of string)
            CX = Number of bytes to search (0 = until end of string)
            DI = Substring Location

            Return:
            BX = Index of first instance found, -1 if not found
            CF = Set if not found/error

            Finds the first instance of a substring within a string, given certain bounds.

        STRING_COPY
            AL = 0x02
            SI = String Location
            DI = Destination buffer

            Copies a string.

        STRING_UPCASE
            AL = 0x10
            SI = String Location
            DI = Destination buffer

            Converts all characters in a string to uppercase.

        STRING_DOWNCASE
            AL = 0x11
            SI = String Location
            DI = Destination buffer

            Converts all characters in a string to lowercase.

        STRING_SUBSTRING_IQ
            AL = 0x12
            SI = String Location
            BX = Starting index
            CX = Length of substring
            DI = Destination buffer

            Return:
            CF = Set on error

            Gets a substring from a string.

        STRING_SUBSTRING_INDICES
            AL = 0x13
            SI = String Location
            BX = Starting index
            CX = Ending index
            DI = Destination buffer

            Return:
            CF = Set on error

            Gets a substring from a string.

        STRING_CHOMP_LEADING_SPACES
            AL = 0x18
            SI = String Location
            DI = Destination buffer

            Chomps any leading spaces off of a string.

        STRING_LENGTH
            AL = 0x20
            SI = String Location

            Return:
            CX = Number of chars in string

            Returns the total number of characters in a string (doesn't count NULL).

        STRING_REPLACE_CHAR
            AL = 0x40
            SI = String location
            DH = Character to search for
            DL = Character to replace with
            DI = Destination buffer

            Return:
            CF = Set on error

            Searches a string for a specific character, and replaces all instances with a
            different character.


    AH = 0x81: LIST OPERATIONS

        LIST_ITEM
            AL = 0x00
            CX = Index of item
            SI = List Location
            DI = Output buffer

            Return:
            CF = Set on error

            Retrieves a specific item from a comma-separated list.

        LIST_TOTAL
            AL = 0x01
            SI = List Location

            Return:
            CX = Number of items

            Gets the number of items in a comma-separated list.


    AH = 0x82: NUMBER OPERATIONS

        INT_HEX
            AL = 0x00
            DX = Number to print

            Prints integer as hexadecimal notation at cursor position.

        BYTE_HEX
            AL = 0x01
            DL = Number to print

            Prints byte as hexadecimal notation at cursor position.

        INT_DEC
            AL = 0x02
            DX = Number to print

            Prints integer as decimal notation at cursor position.

        BYTE_DEC
            AL = 0x03
            DL = Number to print

            Prints byte as decimal notation at cursor position.

    AH = 0x83: DATE OPERATIONS

        UNIXTIME_DATESTAMP
            AL = 0x00
            DX:BX = UNIX timestamp

            Prints UNIX timestamp as ASCII YYYY-MM-DD datestamp.

        UNIXTIME_TIMESTAMP
            AL = 0x01
            DX:BX = UNIX timestamp

            Prints UNIX timestamp as ASCII HH:MM:SS timestamp.

    STRING_FIND_CHAR
        AH = 0x88
        AL = Character to search for (key)
        SI = String Location
        BX = Starting index for search (0 = start of string)
        CX = Number of bytes to search (0 = until end of string)

        Return:
        BX = Index of first instance found, -1 if not found
        CF = Set if not found/error

        Finds the first instance of a character within a string, given certain bounds.


V. Logic Functions

    INT_HEX_MEM
        AH = 0xF0
        DX = Value to convert
        DI = 4-byte output buffer

        Converts the value in DX into ASCII hexadecimal notation, which is stored in the four-
        byte output buffer.

    INT_DEC_MEM
        AH = 0xF1
        DX = Value to convert
        DI = 5-byte output buffer

        Converts the value in DX into ASCII decimal notation (unsigned), which is stored in the
        five-byte output buffer.

    HEX_INT_MEM
        AH = 0xF2
        SI = 4-byte input buffer

        Return:
        DX = Binary value
        CF = Set on error

        Converts the ASCII hexadecimal number in the four-byte input buffer to a word-size binary
        value in DX.

    DEC_INT_MEM
        AH = 0xF3
        SI = 5-byte input buffer

        Return:
        DX = Binary value
        CF = Set on error

        Converts the ASCII decimal number in the five-byte input buffer to a word-size binary
        value in DX.

    BYTE_HEX_MEM
        AH = 0xF4
        DL = Value to convert
        DI = 2-byte output buffer

        Converts the value in DL into ASCII hexadecimal notation, which is stored in the two-
        byte output buffer.

    BYTE_DEC_MEM
        AH = 0xF5
        DL = Value to convert
        DI = 3-byte output buffer

        Converts the value in DL into ASCII decimal notation (unsigned), which is stored in the
        three-byte output buffer.

    HEX_BYTE_MEM
        AH = 0xF6
        SI = 2-byte input buffer

        Return:
        DL = Binary value
        CF = Set on error

        Converts the ASCII hexadecimal number in the two-byte input buffer to a byte-size binary
        value in DX.

    DEC_BYTE_MEM
        AH = 0xF7
        SI = 3-byte input buffer

        Return:
        DL = Binary value
        CF = Set on error

        Converts the ASCII decimal number in the three-byte input buffer to a byte-size binary
        value.

    DISASSEMBLE_UNIXTIME
        AH = 0xD1
        DX:BX = UNIX timestamp

        Return:
        DX = Number of days
        CF:AX = Number of seconds

        Returns the number of seconds since 00:00:00 and the number of days since 1970-01-01.

    UNIXTIME_TIMESTAMP_MEM
        AH = 0xD2
        DX:BX = UNIX timestamp
        DI = 8-byte output buffer

        Stores the current time in HH:MM:SS form in the buffer pointed to by DI.

    UNIXTIME_DATESTAMP_MEM
        AH = 0xD3
        DX:BX = UNIX timestamp
        DI = 10-byte output buffer

        Stores the current date in YYYY-MM-DD form in the buffer pointed to by DI.


VI. Interface Functions

    PRINT
        AH = 0x01
        SI = String location

        Prints out the string in SI in teletype mode.

    PRINT_LINE
        AH = 0x02
        SI = String location

        Prints out the string in SI in teletype mode, and then moves the cursor to the next line.

    CONFIRM
        AH = 0x03

        Return:
        CF = Set if confirmation denied, cleared if confirmation given.

        Prompts the user to give confirmation before proceeding. The carry-flag will be set if
        confirmation was not given.

    INPUT
        AH = 0x04
        DI = Buffer location
        CX = Size of buffer

        Return:
        DI = Initial value + Number of chars input
        CF = Set if CTRL+BREAK used

        Retrieves user input through the keyboard. Any input will be printed out in teletype
        mode, and the input will be stored in the buffer pointed to by DI. Terminates upon RETURN
        or CTRL+BREAK.

    LINE_BREAK
        AH = 0x05

        Moves the cursor to the far left of the next line down.

    CLEAR_SCREEN
        AH = 0x06

        Clears the screen.

    SHOW_HIDE_CURSOR
        AH = 0x07
        CF = Cleared for show, set for hide

        Shows or hides the cursor.

    SET_CURSOR_POSITION
        AH = 0x08
        DH = Row number
        DL = Col number

        Moves the cursor to the specified position.

    PAUSE
        AH = 0x09

        Pauses execution until a key is pressed.

    SET_SCREEN_ATTRIBUTE
        AH = 0x0A
        BL = Attribute (Bits 0-3 = Foreground color, Bits 4-6 = Background color, Bit 7 = Blink)

        Sets the foreground/background color of the entire screen.

    PRINT_FORMATTED
        AH = 0x0B
        BL = Attribute
        SI = String location

        Prints a string in a specific color.

    PRINT_LINE_FORMATTED
        AH = 0x0C
        BL = Attribute
        SI = String location

        Prints a string in a specific color, and then moves the cursor to the next line.

    GET_CURSOR_POSITION
        AH = 0x0D

        Return:
        DH = Row number
        DL = Col number

        Returns the cursor's current position.

    GET_IFACE_CONFIG
        AH = 0x0E

        Return:
        AL = Interface config byte

        Retrieves the value of the interface configuration byte.

    SET_IFACE_CONFIG
        AH = 0x0F
        AL = New value (Bit 0 = Error messages off, Bit 1 = Commentary off, Bit 2 = List Hidden Files)

        Changes the interface configuration for the command.

    PRINT_BYTES
        AH = 0x10
        SI = Source
        CX = Number of characters

        Prints out specified number of characters from source. BS (0x08) is printed as a char.

    DRAW_BLOCK
        AH = 0x11
        AL = Char ASCII code
        BL = Color (Bit 0 = Blue, Bit 1 = Green, Bit 2 = Red, Bit 3 = Intensity)
        CX = Block length
        DH = Row number
        DL = Col number

        Draws a block of a specific length, color, and character starting at the specified spot.

    GET_KEYBOARD_STATUS
        AH = 0x12

        Return:
        AH = Key scan code
        AL = ASCII code
        CF = Set if no key pressed, cleared if key is being pressed

        Returns the scan code and ASCII code of the key being pressed on the keyboard.

    INDENT_CURSOR
        AH = 0x13
        DL = Col number

        Moves the cursor to the specified col while keeping it in the same row.

    ADVANCE_CURSOR
        AH = 0x14

        Moves the cursor ahead one character.

    GET_NEXT_KEY
        AH = 0x15

        Return:
        AH = Key scan code
        AL = ASCII code

    PRINT_BYTES_LITERAL
        AH = 0x18
        SI = Source
        CX = Number of characters

        Similar to PRINT BYTES except newline (0x0A) is printed as a char.

    PRINT_CHAR
        AH = 0x19
        AL = ASCII code

        Prints a single character.

    GET_PARAM
        AH = 0x20
        CX = Item index (0 = first item)
        DI = Output buffer

        Return:
        CF = Set on error

        Retrieves a certain parameter from the command input by the user.

    GET_PARAMS_TOTAL
        AH = 0x21

        Return:
        CX = Number of parameters

        Gets the number of parameters given to the command.

    GET_PARAM_INT
        AH = 0x22
        CX = Item index (0 = first item)

        Return:
        DX = Value
        CF = Set on error

        Retrieves a certain parameter as a 16-bit integer (converted from decimal).

    GET_PARAM_INT8
        AH = 0x23
        CX = Item index (0 = first item)

        Return:
        DL = Value
        CF = Set on error

        Retrieves a certain parameter as an 8-bit integer (converted from decimal).

    GET_PARAM_BYTE
        AH = 0x24
        CX = List item (0 = first item)

        Return:
        AL = Value
        CF = Set on error

        Retrieves a certain parameter as a byte (ASCII code).

    CHECK_FLAGS_USED
        AH = 0x26

        Return:
        ZF = Set if no flags used, cleared if any flags used

        Checks if any flags were input as part of the command.

    CHECK_FLAG
        AH = 0x27
        AL = Flag ASCII code

        Return:
        ZF = Set if flag set
        CF = Set on error

        Checks if a certain flag was specified by the user.

    LOAD_FILE_PARAM1
        AH = 0x28

        Return:
        CF = Set on error

        Gets the first parameter, clears the file buffer, and attempts to load the file with that
        name, should it exist. The file is now verified.

    LOAD_FILE_PARAM_OFFSET
        AH = 0x29
        DI = Offset from file buffer to load into
        CX = Parameter with filename

        Return:
        CF = Set on error

        Gets a certain parameter and attempts to load the file with that name to a specific
        offset. The file is now verified.

    VERIFY_FILE_PARAM
        AH = 0x2A
        CX = Parameter with filename

        Return:
        CF = Set if file does not exist, cleared if it does.

        Verifies that a file with the filename given in a specific parameter exists, and sets up
        for loading tha file.

    INFO_MSG
        AH = 0x30
        SI = String Location

        Prints a string as an INFO message.

    WARN_MSG
        AH = 0x31
        SI = String Location

        Return:
        CF = Set if confirmation not given

        Prints a string as a WARN message, then asks for confirmation.


VII. Disk Functions

    VERIFY
        AH = 0x60
        SI = X.3 filename

        Return:
        CF = Set if file does not exist, cleared if it does.

        Verifies that a file with the given filename exists, and sets up for loading that file.

    LOAD_FILE
        AH = 0x61

        Return:
        CF = Set on error

        Clears the file buffer and loads the file that was just verified into it.

    GET_BYTES_IQ
        AH = 0x62
        SI = Byte to start at
        CX = Number of bytes
        DI = Destination buffer

        Return:
        SI = Initial value + Number of bytes copied
        DI = Initial value + Number of bytes copied

        Gets a certain quantity of bytes from the file buffer starting at the given index, and
        stores that in the destination buffer.

    GET_BYTES_INDICES
        AH = 0x63
        SI = Byte to start at
        CX = Byte to stop at (non-inclusive)
        DI = Destination buffer

        Return:
        SI = Initial value + Number of bytes copied
        DI = Initial value + Number of bytes copied

        Gets bytes from file buffer between the two indexes, and stores that in the destination
        buffer.

    GET_LINE
        AH = 0x64
        CX = Line number
        DI = Destination buffer

        Return:
        DI = Initial value + Number of bytes copied
        CF = Set on error

        Gets a certain line from the file buffer, and stores that in the destination buffer.

    GET_LINE_ADDR
        AH = 0x65
        CX = Line number

        Return:
        SI = Address of line
        CF = Set on error

        Gets the address of a certain line.

    LOAD_FILE_OFFSET
        AH = 0x66
        DI = Offset from file buffer to load into

        Return:
        CF = Set on error

        Loads the file that was just verified into the specified offset from the file buffer.

    CONV_ADDR_LINE_COL
        AH = 0x67
        SI = Address

        Return:
        CX = Line Number
        DX = Col Number

        Gets the line and column from a specified address.

    WRITE_BYTES_IQ
        AH = 0x68
        SI = Source buffer
        CX = Number of bytes
        DI = Byte to start writing at

        Return:
        SI = Initial value + Number of bytes copied
        DI = Initial value + Number of bytes copied

        WRITES a certain quantity of bytes from the source buffer into the file buffer at the
        given index.

    WRITE_BYTES_INDICES
        AH = 0x69
        SI = Source buffer
        CX = End of source buffer
        DI = Byte to start writing at

        Return:
        SI = Initial value + Number of bytes copied
        DI = Initial value + Number of bytes copied

        WRITES bytes from the buffer between the two indexes into the file buffer at the given
        index.

    WRITE_LINE
        AH = 0x6A
        SI = Source buffer
        CX = Line number

        Return:
        CX = Bytes offset
        CF = Set on error

        WRITES a line from the source buffer into the file buffer at the given line number.

    INSERT_BYTES_IQ
        AH = 0x6B
        SI = Source buffer
        CX = Number of bytes
        DI = Byte to start writing at

        INSERTS a certain quantity of bytes from the source buffer into the file buffer at the
        given index. Negative numbers (above 32,767) will simply shift bytes in the buffer to the
        left, without writing any new data.

    INSERT_BYTES_INDICES
        AH = 0x6C
        SI = Source buffer
        CX = End of source buffer
        DI = Byte to start writing at

        INSERTS bytes from the buffer between the two indexes into the file buffer at the given
        index.

    INSERT_LINE
        AH = 0x6D
        SI = Source buffer
        CX = Line number

        Return:
        CX = Bytes offset
        CF = Set on error

        INSERTS a line from the source buffer into the file buffer at the given line number.

    CLEAR_FILE_BUFFER
        AH = 0x6E

        Overwrites everything in the file buffer with zeroes.

    WRITE_TO_DISK
        AH = 0x6F
        SI = X.3 filename (or 0x0000)
        CX = File size

        Return:
        CF = Set on error

        Write file with given filename to disk. If SI is 0, then the most recently verified file
        will be used.

    GET_SIZE_FILE
        AH = 0x70

        Return:
        DX:AX = File size in bytes

        Returns the size of the file last verified.

    GET_CREATION_DATE_FILE
        AH = 0x71

        Return:
        DX:BX = UNIX timestamp of creation date

        Returns the creation date/time of the file last verified in the form of a UNIX timestamp.

    GET_ACCESS_DATE_FILE
        AH = 0x72

        Return:
        DX:BX = UNIX timestamp of access date

        Returns the access date of the file last verified in the form of a UNIX timestamp.

    GET_WRITE_DATE_FILE
        AH = 0x73

        Return:
        DX:BX = UNIX timestamp of write date

        Returns the write date/time of the file last verified in the form of a UNIX timestamp.

    CHECK_FILE_READONLY
        AH = 0x74

        Return:
        CF = Set if read-only

        Sets the carry flag if the file last verified is read-only.

    CHECK_FILE_HIDDEN
        AH = 0x75

        Return:
        CF = Set if hidden

        Sets the carry flag if the file last verified is hidden.

    CHECK_FILE_SYSTEM
        AH = 0x76

        Return:
        CF = Set if system file

        Sets the carry flag if the file last verified is an important system file.

    GET_FILE_LIST
        AH = 0x77
        DI = Output buffer

        Returns a comma-separated list of files from the root directory.

    RENAME_FILE
        AH = 0x78
        SI = X.3 filename to rename to

        Return:
        CF = Set on error

        Renames the verified file.

    DELETE_FILE
        AH = 0x79

        Return:
        CF = Set on error

        Deletes the verified file.

    HIDE_REVEAL_FILE
        AH = 0x7A
        CF = Set to reveal, cleared to hide

        Return:
        CF = Set on error

        Hides/reveals the verified file.

    ROLLBACK
        AH = 0x7E

        Return:
        CF = Set on error

        Re-loads the FAT and directory from the disk into memory, thereby getting rid of all
        filesystem changes since last apply.

    APPLY
        AH = 0x7F

        Return:
        CF = Set on error

        Writes the FAT and directory to the disk as they are in memory, thereby applying all
        renames and deletions.


VIII. Miscellaneous Functions

    GEN_RANDOM_NUMBER
        AH = 0xA0

        Return:
        DX = Random number

        Generates and returns a very poorly-generated pseudo-random number.

    GEN_NEW_SEED
        AH = 0xA1

        Generates a new random number seed. (Ineffective if used multiple times a second.)

    SLEEP_MILLIS
        AH = 0xC0
        CX = Number of milliseconds

        Halts execution for the specified number of milliseconds.

    SLEEP_FRAMES
        AH = 0xC1
        BX = Framerate/Frequency
        CX = Number of frames

        Halts instruction for the specified number of frames if a frame is 1/Frequency seconds
        long.

    PC_SPEAKER_TONE
        AH = 0xC2
        DX = Frequency (Hz)

        Plays tone of specified frequency on the PC speaker.

    PC_SPEAKER_MUTE
        AH = 0xC3

        Stops the PC speaker until a new tone is played.
